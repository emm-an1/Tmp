import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from pptx import Presentation
from pptx.util import Inches
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor

# Create a PowerPoint presentation
prs = Presentation()

# Title Slide
slide_title = prs.slides.add_slide(prs.slide_layouts[0])
title = slide_title.shapes.title
subtitle = slide_title.placeholders[1]
title.text = "Derivation of Return of the Ratio of Two Assets"
subtitle.text = "Mathematical Derivation and Explanation"

# Slide 1: Definitions
slide_1 = prs.slides.add_slide(prs.slide_layouts[1])
title_1 = slide_1.shapes.title
content_1 = slide_1.placeholders[1]
title_1.text = "Definitions"
definitions = (
    "Prices:\n"
    "P_A(t), P_A(t-1) are the prices of asset A at times t and t-1\n"
    "P_B(t), P_B(t-1) are the prices of asset B at times t and t-1\n\n"
    "Ratio:\n"
    "ratio(t) = P_A(t) / P_B(t)\n"
    "ratio(t-1) = P_A(t-1) / P_B(t-1)\n\n"
    "Returns:\n"
    "R_A(t) = (P_A(t) - P_A(t-1)) / P_A(t-1)\n"
    "R_B(t) = (P_B(t) - P_B(t-1)) / P_B(t-1)"
)
content_1.text = definitions

# Slide 2: Return of the Ratio
slide_2 = prs.slides.add_slide(prs.slide_layouts[1])
title_2 = slide_2.shapes.title
content_2 = slide_2.placeholders[1]
title_2.text = "Return of the Ratio"
return_of_ratio = (
    "The return of the ratio is defined as:\n"
    "R_ratio(t) = (ratio(t) - ratio(t-1)) / ratio(t-1)\n\n"
    "First, letâ€™s express ratio(t) and ratio(t-1) in terms of prices:\n"
    "ratio(t) = P_A(t) / P_B(t)\n"
    "ratio(t-1) = P_A(t-1) / P_B(t-1)\n\n"
    "The return of the ratio R_ratio(t) is:\n"
    "R_ratio(t) = (P_A(t) / P_B(t) - P_A(t-1) / P_B(t-1)) / (P_A(t-1) / P_B(t-1))"
)
content_2.text = return_of_ratio

# Slide 3: Simplify the Expression
slide_3 = prs.slides.add_slide(prs.slide_layouts[1])
title_3 = slide_3.shapes.title
content_3 = slide_3.placeholders[1]
title_3.text = "Simplify the Expression"
simplify_expression = (
    "Simplify the expression:\n"
    "R_ratio(t) = [(P_A(t) P_B(t-1) - P_A(t-1) P_B(t)) / (P_B(t) P_B(t-1))] / (P_A(t-1) / P_B(t-1))\n"
    "R_ratio(t) = (P_A(t) P_B(t-1) - P_A(t-1) P_B(t)) / (P_A(t-1) P_B(t))\n\n"
    "Express P_A(t) and P_B(t) in terms of returns:\n"
    "P_A(t) = P_A(t-1) (1 + R_A(t))\n"
    "P_B(t) = P_B(t-1) (1 + R_B(t))"
)
content_3.text = simplify_expression

# Slide 4: Substitute into the Formula
slide_4 = prs.slides.add_slide(prs.slide_layouts[1])
title_4 = slide_4.shapes.title
content_4 = slide_4.placeholders[1]
title_4.text = "Substitute into the Formula"
substitute_formula = (
    "Substitute these into the return of the ratio formula:\n"
    "R_ratio(t) = [(P_A(t-1) (1 + R_A(t)) P_B(t-1) - P_A(t-1) (P_B(t-1) (1 + R_B(t))))] / [P_A(t-1) (P_B(t-1) (1 + R_B(t)))]\n\n"
    "R_ratio(t) = [P_A(t-1) P_B(t-1) (1 + R_A(t)) - P_A(t-1) P_B(t-1) (1 + R_B(t))] / [P_A(t-1) P_B(t-1) (1 + R_B(t))]\n\n"
    "R_ratio(t) = [P_A(t-1) P_B(t-1) (R_A(t) - R_B(t))] / [P_A(t-1) P_B(t-1) (1 + R_B(t))]"
)
content_4.text = substitute_formula

# Slide 5: Final Simplification
slide_5 = prs.slides.add_slide(prs.slide_layouts[1])
title_5 = slide_5.shapes.title
content_5 = slide_5.placeholders[1]
title_5.text = "Final Simplification"
final_simplification = (
    "Simplify the equation:\n"
    "R_ratio(t) = (R_A(t) - R_B(t)) / (1 + R_B(t))\n\n"
    "Summary:\n"
    "The return of the ratio of the two assets R_ratio(t) can be expressed as:\n"
    "R_ratio(t) = (R_A(t) - R_B(t)) / (1 + R_B(t))\n\n"
    "This formula shows that the return of the ratio depends on the difference between the individual returns R_A(t) and R_B(t), adjusted by the return of the second asset R_B(t)."
)
content_5.text = final_simplification

# Save the presentation
prs.save("/mnt/data/Return_of_Ratio_Derivation.pptx")

# Let the user know the file has been created
pptx_path = "/mnt/data/Return_of_Ratio_Derivation.pptx"
pptx_path










mport pandas as pd

def find_first_common_date(dates1, values1, dates2, values2):
    # Create DataFrames
    df1 = pd.DataFrame({'date': dates1, 'value': values1})
    df2 = pd.DataFrame({'date': dates2, 'value': values2})

    # Convert date columns to datetime
    df1['date'] = pd.to_datetime(df1['date'])
    df2['date'] = pd.to_datetime(df2['date'])

    # Find the first common date
    common_dates = set(df1['date']).intersection(set(df2['date']))
    first_common_date = min(common_dates)

    return first_common_date

def rebase_series(dates, values, rebase_date, first_rebase_value=100):
    # Create DataFrame
    df = pd.DataFrame({'date': dates, 'value': values})

    # Convert date column to datetime
    df['date'] = pd.to_datetime(df['date'])

    # Filter data starting from the rebase date
    df = df[df['date'] >= rebase_date].copy()

    # Calculate daily returns
    df['return'] = df['value'].pct_change()

    # Initialize the rebased price
    df['rebased_value'] = first_rebase_value

    # Apply the returns to get rebased values
    for i in range(1, len(df)):
        df.iloc[i, df.columns.get_loc('rebased_value')] = df.iloc[i-1, df.columns.get_loc('rebased_value')] * (1 + df.iloc[i, df.columns.get_loc('return')])

    return df[['date', 'rebased_value']]

# Example usage:
dates1 = ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04']
values1 = [100, 105, 103, 108]
dates2 = ['2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05']
values2 = [200, 195, 198, 202]

first_common_date = find_first_common_date(dates1, values1, dates2, values2)
print(f"First common date: {first_common_date}")

rebased_series1 = rebase_series(dates1, values1, first_common_date, 100)
rebased_series2 = rebase_series(dates2, values2, first_common_date, 100)

print("Rebased Series 1:")
print(rebased_series1)

print("Rebased Series 2:")
print(rebased_series2)











 import pandas as pd

def rebase_series(dates1, prices1, dates2, prices2, rebase_date=None):
    # Create DataFrames
    df1 = pd.DataFrame({'date': dates1, 'price': prices1})
    df2 = pd.DataFrame({'date': dates2, 'price': prices2})

    # Convert date columns to datetime
    df1['date'] = pd.to_datetime(df1['date'])
    df2['date'] = pd.to_datetime(df2['date'])

    # Set date as index
    df1.set_index('date', inplace=True)
    df2.set_index('date', inplace=True)

    # Calculate daily returns
    df1['return'] = df1['price'].pct_change()
    df2['return'] = df2['price'].pct_change()

    # Align the dataframes to have the same date range
    df1_aligned, df2_aligned = df1.align(df2, join='inner')

    # Determine the rebase date if not provided
    if rebase_date is None:
        rebase_date = max(df1_aligned.index.min(), df2_aligned.index.min())

    # Filter data starting from the rebase date
    df1_aligned = df1_aligned[df1_aligned.index >= rebase_date]
    df2_aligned = df2_aligned[df2_aligned.index >= rebase_date]

    # Initialize the rebased prices starting at 100
    df1_aligned['rebased_price'] = 100
    df2_aligned['rebased_price'] = 100

    # Apply the returns to get rebased prices
    for i in range(1, len(df1_aligned)):
        df1_aligned.iloc[i, df1_aligned.columns.get_loc('rebased_price')] = df1_aligned.iloc[i-1, df1_aligned.columns.get_loc('rebased_price')] * (1 + df1_aligned.iloc[i, df1_aligned.columns.get_loc('return')])

    for i in range(1, len(df2_aligned)):
        df2_aligned.iloc[i, df2_aligned.columns.get_loc('rebased_price')] = df2_aligned.iloc[i-1, df2_aligned.columns.get_loc('rebased_price')] * (1 + df2_aligned.iloc[i, df2_aligned.columns.get_loc('return')])

    # Merge the rebased prices into a single DataFrame for comparison
    rebased_df = pd.DataFrame({'date': df1_aligned.index, 'rebased_price_1': df1_aligned['rebased_price'], 'rebased_price_2': df2_aligned['rebased_price']})

    # Reset index for final display
    rebased_df.set_index('date', inplace=True)

    return rebased_df

# Example usage:
dates1 = ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04']
prices1 = [100, 105, 103, 108]
dates2 = ['2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05']
prices2 = [200, 195, 198, 202]

rebased_df = rebase_series(dates1, prices1, dates2, prices2, rebase_date=None)
print(rebased_df)
 
